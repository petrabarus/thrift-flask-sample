<?php
namespace petrabarus;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Point extends TBase {
  static $_TSPEC;

  /**
   * @var double
   */
  public $x = null;
  /**
   * @var double
   */
  public $y = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'y',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Point';
  }

  public function read($input)
  {
    $tmp = $this->_read('Point', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('Point', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->x === null) {
      throw new TProtocolException('Required field Point.x is unset!');
    }
    if ($this->y === null) {
      throw new TProtocolException('Required field Point.y is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->x === null) {
      throw new TProtocolException('Required field Point.x is unset!');
    }
    if ($this->y === null) {
      throw new TProtocolException('Required field Point.y is unset!');
    }
  }

}


